{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/ithub-vue/node_modules/.pnpm/@primeuix+styled@0.6.3/node_modules/@primeuix/styled/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/actions/definePreset.ts\nimport { deepMerge } from \"@primeuix/utils/object\";\nfunction definePreset(...presets) {\n  return deepMerge(...presets);\n}\n\n// src/actions/updatePreset.ts\nimport { deepMerge as deepMerge2 } from \"@primeuix/utils/object\";\n\n// src/service/index.ts\nimport { EventBus } from \"@primeuix/utils/eventbus\";\nvar ThemeService = EventBus();\nvar service_default = ThemeService;\n\n// src/utils/sharedUtils.ts\nimport { getKeyValue, isArray, isNotEmpty, isNumber, isObject, isString, matchRegex, toKebabCase } from \"@primeuix/utils/object\";\nvar EXPR_REGEX = /{([^}]*)}/g;\nvar CALC_REGEX = /(\\d+\\s+[\\+\\-\\*\\/]\\s+\\d+)/g;\nvar VAR_REGEX = /var\\([^)]+\\)/g;\nfunction toTokenKey(str) {\n  return isString(str) ? str.replace(/[A-Z]/g, (c, i) => i === 0 ? c : \".\" + c.toLowerCase()).toLowerCase() : str;\n}\nfunction merge(value1, value2) {\n  if (isArray(value1)) {\n    value1.push(...value2 || []);\n  } else if (isObject(value1)) {\n    Object.assign(value1, value2);\n  }\n}\nfunction toValue(value) {\n  return isObject(value) && value.hasOwnProperty(\"$value\") && value.hasOwnProperty(\"$type\") ? value.$value : value;\n}\nfunction toUnit(value, variable = \"\") {\n  const excludedProperties = [\"opacity\", \"z-index\", \"line-height\", \"font-weight\", \"flex\", \"flex-grow\", \"flex-shrink\", \"order\"];\n  if (!excludedProperties.some((property) => variable.endsWith(property))) {\n    const val = `${value}`.trim();\n    const valArr = val.split(\" \");\n    return valArr.map((v) => isNumber(v) ? `${v}px` : v).join(\" \");\n  }\n  return value;\n}\nfunction toNormalizePrefix(prefix) {\n  return prefix.replaceAll(/ /g, \"\").replace(/[^\\w]/g, \"-\");\n}\nfunction toNormalizeVariable(prefix = \"\", variable = \"\") {\n  return toNormalizePrefix(`${isString(prefix, false) && isString(variable, false) ? `${prefix}-` : prefix}${variable}`);\n}\nfunction getVariableName(prefix = \"\", variable = \"\") {\n  return `--${toNormalizeVariable(prefix, variable)}`;\n}\nfunction hasOddBraces(str = \"\") {\n  const openBraces = (str.match(/{/g) || []).length;\n  const closeBraces = (str.match(/}/g) || []).length;\n  return (openBraces + closeBraces) % 2 !== 0;\n}\nfunction getVariableValue(value, variable = \"\", prefix = \"\", excludedKeyRegexes = [], fallback) {\n  if (isString(value)) {\n    const val = value.trim();\n    if (hasOddBraces(val)) {\n      return void 0;\n    } else if (matchRegex(val, EXPR_REGEX)) {\n      const _val = val.replaceAll(EXPR_REGEX, (v) => {\n        const path = v.replace(/{|}/g, \"\");\n        const keys = path.split(\".\").filter((_v) => !excludedKeyRegexes.some((_r) => matchRegex(_v, _r)));\n        return `var(${getVariableName(prefix, toKebabCase(keys.join(\"-\")))}${isNotEmpty(fallback) ? `, ${fallback}` : \"\"})`;\n      });\n      return matchRegex(_val.replace(VAR_REGEX, \"0\"), CALC_REGEX) ? `calc(${_val})` : _val;\n    }\n    return val;\n  } else if (isNumber(value)) {\n    return value;\n  }\n  return void 0;\n}\nfunction getComputedValue(obj = {}, value) {\n  if (isString(value)) {\n    const val = value.trim();\n    return matchRegex(val, EXPR_REGEX) ? val.replaceAll(EXPR_REGEX, (v) => getKeyValue(obj, v.replace(/{|}/g, \"\"))) : val;\n  } else if (isNumber(value)) {\n    return value;\n  }\n  return void 0;\n}\nfunction setProperty(properties, key, value) {\n  if (isString(key, false)) {\n    properties.push(`${key}:${value};`);\n  }\n}\nfunction getRule(selector, properties) {\n  if (selector) {\n    return `${selector}{${properties}}`;\n  }\n  return \"\";\n}\nfunction evaluateDtExpressions(input, fn) {\n  if (input.indexOf(\"dt(\") === -1) return input;\n  function fastParseArgs(str, fn2) {\n    const args = [];\n    let i = 0;\n    let current = \"\";\n    let quote = null;\n    let depth = 0;\n    while (i <= str.length) {\n      const c = str[i];\n      if ((c === '\"' || c === \"'\" || c === \"`\") && str[i - 1] !== \"\\\\\") {\n        quote = quote === c ? null : c;\n      }\n      if (!quote) {\n        if (c === \"(\") depth++;\n        if (c === \")\") depth--;\n        if ((c === \",\" || i === str.length) && depth === 0) {\n          const arg = current.trim();\n          if (arg.startsWith(\"dt(\")) {\n            args.push(evaluateDtExpressions(arg, fn2));\n          } else {\n            args.push(parseArg(arg));\n          }\n          current = \"\";\n          i++;\n          continue;\n        }\n      }\n      if (c !== void 0) current += c;\n      i++;\n    }\n    return args;\n  }\n  function parseArg(arg) {\n    const q = arg[0];\n    if ((q === '\"' || q === \"'\" || q === \"`\") && arg[arg.length - 1] === q) {\n      return arg.slice(1, -1);\n    }\n    const num = Number(arg);\n    return isNaN(num) ? arg : num;\n  }\n  const indices = [];\n  const stack = [];\n  for (let i = 0; i < input.length; i++) {\n    if (input[i] === \"d\" && input.slice(i, i + 3) === \"dt(\") {\n      stack.push(i);\n      i += 2;\n    } else if (input[i] === \")\" && stack.length > 0) {\n      const start = stack.pop();\n      if (stack.length === 0) {\n        indices.push([start, i]);\n      }\n    }\n  }\n  if (!indices.length) return input;\n  for (let i = indices.length - 1; i >= 0; i--) {\n    const [start, end] = indices[i];\n    const inner = input.slice(start + 3, end);\n    const args = fastParseArgs(inner, fn);\n    const resolved = fn(...args);\n    input = input.slice(0, start) + resolved + input.slice(end + 1);\n  }\n  return input;\n}\n\n// src/utils/themeUtils.ts\nimport { isArray as isArray2, isEmpty as isEmpty2, isNotEmpty as isNotEmpty2, isObject as isObject3, matchRegex as matchRegex5, minifyCSS, resolve as resolve2, toTokenKey as toTokenKey2 } from \"@primeuix/utils/object\";\n\n// src/helpers/color/mix.ts\nfunction normalizeColor(color) {\n  if (color.length === 4) {\n    return `#${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n  }\n  return color;\n}\nfunction hexToRgb(hex) {\n  const bigint = parseInt(hex.substring(1), 16);\n  const r = bigint >> 16 & 255;\n  const g = bigint >> 8 & 255;\n  const b = bigint & 255;\n  return { r, g, b };\n}\nfunction rgbToHex(r, g, b) {\n  return `#${r.toString(16).padStart(2, \"0\")}${g.toString(16).padStart(2, \"0\")}${b.toString(16).padStart(2, \"0\")}`;\n}\nvar mix_default = (color1, color2, weight) => {\n  color1 = normalizeColor(color1);\n  color2 = normalizeColor(color2);\n  const p = weight / 100;\n  const w = p * 2 - 1;\n  const w1 = (w + 1) / 2;\n  const w2 = 1 - w1;\n  const rgb1 = hexToRgb(color1);\n  const rgb2 = hexToRgb(color2);\n  const r = Math.round(rgb1.r * w1 + rgb2.r * w2);\n  const g = Math.round(rgb1.g * w1 + rgb2.g * w2);\n  const b = Math.round(rgb1.b * w1 + rgb2.b * w2);\n  return rgbToHex(r, g, b);\n};\n\n// src/helpers/color/palette.ts\nimport { matchRegex as matchRegex2 } from \"@primeuix/utils\";\n\n// src/helpers/color/shade.ts\nvar shade_default = (color, percent) => mix_default(\"#000000\", color, percent);\n\n// src/helpers/color/tint.ts\nvar tint_default = (color, percent) => mix_default(\"#ffffff\", color, percent);\n\n// src/helpers/color/palette.ts\nvar scales = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];\nvar palette_default = (color) => {\n  if (matchRegex2(color, EXPR_REGEX)) {\n    const token = color.replace(/{|}/g, \"\");\n    return scales.reduce((acc, scale) => (acc[scale] = `{${token}.${scale}}`, acc), {});\n  }\n  return typeof color === \"string\" ? scales.reduce((acc, scale, i) => (acc[scale] = i <= 5 ? tint_default(color, (5 - i) * 19) : shade_default(color, (i - 5) * 15), acc), {}) : color;\n};\n\n// src/helpers/css.ts\nimport { resolve } from \"@primeuix/utils\";\n\n// src/helpers/dt.ts\nimport { isEmpty, matchRegex as matchRegex3 } from \"@primeuix/utils/object\";\nvar $dt = (tokenPath) => {\n  var _a;\n  const theme = config_default.getTheme();\n  const variable = dtwt(theme, tokenPath, void 0, \"variable\");\n  const name = (_a = variable == null ? void 0 : variable.match(/--[\\w-]+/g)) == null ? void 0 : _a[0];\n  const value = dtwt(theme, tokenPath, void 0, \"value\");\n  return {\n    name,\n    variable,\n    value\n  };\n};\nvar dt = (...args) => {\n  return dtwt(config_default.getTheme(), ...args);\n};\nvar dtwt = (theme = {}, tokenPath, fallback, type) => {\n  if (tokenPath) {\n    const { variable: VARIABLE, options: OPTIONS } = config_default.defaults || {};\n    const { prefix, transform } = (theme == null ? void 0 : theme.options) || OPTIONS || {};\n    const token = matchRegex3(tokenPath, EXPR_REGEX) ? tokenPath : `{${tokenPath}}`;\n    const isStrictTransform = type === \"value\" || isEmpty(type) && transform === \"strict\";\n    return isStrictTransform ? config_default.getTokenValue(tokenPath) : getVariableValue(token, void 0, prefix, [VARIABLE.excludedKeyRegex], fallback);\n  }\n  return \"\";\n};\n\n// src/helpers/css.ts\nfunction css(strings, ...exprs) {\n  if (strings instanceof Array) {\n    const raw = strings.reduce((acc, str, i) => {\n      var _a;\n      return acc + str + ((_a = resolve(exprs[i], { dt })) != null ? _a : \"\");\n    }, \"\");\n    return evaluateDtExpressions(raw, dt);\n  }\n  return resolve(strings, { dt });\n}\n\n// src/helpers/t.ts\nimport { mergeKeys } from \"@primeuix/utils/object\";\nvar $t = (theme = {}) => {\n  let { preset: _preset, options: _options } = theme;\n  return {\n    preset(value) {\n      _preset = _preset ? mergeKeys(_preset, value) : value;\n      return this;\n    },\n    options(value) {\n      _options = _options ? __spreadValues(__spreadValues({}, _options), value) : value;\n      return this;\n    },\n    // features\n    primaryPalette(primary) {\n      const { semantic } = _preset || {};\n      _preset = __spreadProps(__spreadValues({}, _preset), { semantic: __spreadProps(__spreadValues({}, semantic), { primary }) });\n      return this;\n    },\n    surfacePalette(surface) {\n      var _a, _b;\n      const { semantic } = _preset || {};\n      const lightSurface = surface && Object.hasOwn(surface, \"light\") ? surface.light : surface;\n      const darkSurface = surface && Object.hasOwn(surface, \"dark\") ? surface.dark : surface;\n      const newColorScheme = {\n        colorScheme: {\n          light: __spreadValues(__spreadValues({}, (_a = semantic == null ? void 0 : semantic.colorScheme) == null ? void 0 : _a.light), !!lightSurface && { surface: lightSurface }),\n          dark: __spreadValues(__spreadValues({}, (_b = semantic == null ? void 0 : semantic.colorScheme) == null ? void 0 : _b.dark), !!darkSurface && { surface: darkSurface })\n        }\n      };\n      _preset = __spreadProps(__spreadValues({}, _preset), { semantic: __spreadValues(__spreadValues({}, semantic), newColorScheme) });\n      return this;\n    },\n    // actions\n    define({ useDefaultPreset = false, useDefaultOptions = false } = {}) {\n      return {\n        preset: useDefaultPreset ? config_default.getPreset() : _preset,\n        options: useDefaultOptions ? config_default.getOptions() : _options\n      };\n    },\n    update({ mergePresets = true, mergeOptions = true } = {}) {\n      const newTheme = {\n        preset: mergePresets ? mergeKeys(config_default.getPreset(), _preset) : _preset,\n        options: mergeOptions ? __spreadValues(__spreadValues({}, config_default.getOptions()), _options) : _options\n      };\n      config_default.setTheme(newTheme);\n      return newTheme;\n    },\n    use(options) {\n      const newTheme = this.define(options);\n      config_default.setTheme(newTheme);\n      return newTheme;\n    }\n  };\n};\n\n// src/helpers/toVariables.ts\nimport { isObject as isObject2, matchRegex as matchRegex4, toKebabCase as toKebabCase2 } from \"@primeuix/utils/object\";\nfunction toVariables_default(theme, options = {}) {\n  const VARIABLE = config_default.defaults.variable;\n  const { prefix = VARIABLE.prefix, selector = VARIABLE.selector, excludedKeyRegex = VARIABLE.excludedKeyRegex } = options;\n  const tokens = [];\n  const variables = [];\n  const stack = [{ node: theme, path: prefix }];\n  while (stack.length) {\n    const { node, path } = stack.pop();\n    for (const key in node) {\n      const raw = node[key];\n      const val = toValue(raw);\n      const skipNormalize = matchRegex4(key, excludedKeyRegex);\n      const variablePath = skipNormalize ? toNormalizeVariable(path) : toNormalizeVariable(path, toKebabCase2(key));\n      if (isObject2(val)) {\n        stack.push({ node: val, path: variablePath });\n      } else {\n        const varName = getVariableName(variablePath);\n        const varValue = getVariableValue(val, variablePath, prefix, [excludedKeyRegex]);\n        setProperty(variables, varName, varValue);\n        let token = variablePath;\n        if (prefix && token.startsWith(prefix + \"-\")) {\n          token = token.slice(prefix.length + 1);\n        }\n        tokens.push(token.replace(/-/g, \".\"));\n      }\n    }\n  }\n  const declarations = variables.join(\"\");\n  return {\n    value: variables,\n    tokens,\n    declarations,\n    css: getRule(selector, declarations)\n  };\n}\n\n// src/utils/themeUtils.ts\nvar themeUtils_default = {\n  regex: {\n    rules: {\n      class: {\n        pattern: /^\\.([a-zA-Z][\\w-]*)$/,\n        resolve(value) {\n          return { type: \"class\", selector: value, matched: this.pattern.test(value.trim()) };\n        }\n      },\n      attr: {\n        pattern: /^\\[(.*)\\]$/,\n        resolve(value) {\n          return { type: \"attr\", selector: `:root${value}`, matched: this.pattern.test(value.trim()) };\n        }\n      },\n      media: {\n        pattern: /^@media (.*)$/,\n        resolve(value) {\n          return { type: \"media\", selector: `${value}{:root{[CSS]}}`, matched: this.pattern.test(value.trim()) };\n        }\n      },\n      system: {\n        pattern: /^system$/,\n        resolve(value) {\n          return { type: \"system\", selector: \"@media (prefers-color-scheme: dark){:root{[CSS]}}\", matched: this.pattern.test(value.trim()) };\n        }\n      },\n      custom: {\n        resolve(value) {\n          return { type: \"custom\", selector: value, matched: true };\n        }\n      }\n    },\n    resolve(value) {\n      const rules = Object.keys(this.rules).filter((k) => k !== \"custom\").map((r) => this.rules[r]);\n      return [value].flat().map((v) => {\n        var _a;\n        return (_a = rules.map((r) => r.resolve(v)).find((rr) => rr.matched)) != null ? _a : this.rules.custom.resolve(v);\n      });\n    }\n  },\n  _toVariables(theme, options) {\n    return toVariables_default(theme, { prefix: options == null ? void 0 : options.prefix });\n  },\n  getCommon({ name = \"\", theme = {}, params, set, defaults }) {\n    var _e, _f, _g, _h, _i, _j, _k;\n    const { preset, options } = theme;\n    let primitive_css, primitive_tokens, semantic_css, semantic_tokens, global_css, global_tokens, style;\n    if (isNotEmpty2(preset) && options.transform !== \"strict\") {\n      const { primitive, semantic, extend } = preset;\n      const _a = semantic || {}, { colorScheme } = _a, sRest = __objRest(_a, [\"colorScheme\"]);\n      const _b = extend || {}, { colorScheme: eColorScheme } = _b, eRest = __objRest(_b, [\"colorScheme\"]);\n      const _c = colorScheme || {}, { dark } = _c, csRest = __objRest(_c, [\"dark\"]);\n      const _d = eColorScheme || {}, { dark: eDark } = _d, ecsRest = __objRest(_d, [\"dark\"]);\n      const prim_var = isNotEmpty2(primitive) ? this._toVariables({ primitive }, options) : {};\n      const sRest_var = isNotEmpty2(sRest) ? this._toVariables({ semantic: sRest }, options) : {};\n      const csRest_var = isNotEmpty2(csRest) ? this._toVariables({ light: csRest }, options) : {};\n      const csDark_var = isNotEmpty2(dark) ? this._toVariables({ dark }, options) : {};\n      const eRest_var = isNotEmpty2(eRest) ? this._toVariables({ semantic: eRest }, options) : {};\n      const ecsRest_var = isNotEmpty2(ecsRest) ? this._toVariables({ light: ecsRest }, options) : {};\n      const ecsDark_var = isNotEmpty2(eDark) ? this._toVariables({ dark: eDark }, options) : {};\n      const [prim_css, prim_tokens] = [(_e = prim_var.declarations) != null ? _e : \"\", prim_var.tokens];\n      const [sRest_css, sRest_tokens] = [(_f = sRest_var.declarations) != null ? _f : \"\", sRest_var.tokens || []];\n      const [csRest_css, csRest_tokens] = [(_g = csRest_var.declarations) != null ? _g : \"\", csRest_var.tokens || []];\n      const [csDark_css, csDark_tokens] = [(_h = csDark_var.declarations) != null ? _h : \"\", csDark_var.tokens || []];\n      const [eRest_css, eRest_tokens] = [(_i = eRest_var.declarations) != null ? _i : \"\", eRest_var.tokens || []];\n      const [ecsRest_css, ecsRest_tokens] = [(_j = ecsRest_var.declarations) != null ? _j : \"\", ecsRest_var.tokens || []];\n      const [ecsDark_css, ecsDark_tokens] = [(_k = ecsDark_var.declarations) != null ? _k : \"\", ecsDark_var.tokens || []];\n      primitive_css = this.transformCSS(name, prim_css, \"light\", \"variable\", options, set, defaults);\n      primitive_tokens = prim_tokens;\n      const semantic_light_css = this.transformCSS(name, `${sRest_css}${csRest_css}`, \"light\", \"variable\", options, set, defaults);\n      const semantic_dark_css = this.transformCSS(name, `${csDark_css}`, \"dark\", \"variable\", options, set, defaults);\n      semantic_css = `${semantic_light_css}${semantic_dark_css}`;\n      semantic_tokens = [.../* @__PURE__ */ new Set([...sRest_tokens, ...csRest_tokens, ...csDark_tokens])];\n      const global_light_css = this.transformCSS(name, `${eRest_css}${ecsRest_css}color-scheme:light`, \"light\", \"variable\", options, set, defaults);\n      const global_dark_css = this.transformCSS(name, `${ecsDark_css}color-scheme:dark`, \"dark\", \"variable\", options, set, defaults);\n      global_css = `${global_light_css}${global_dark_css}`;\n      global_tokens = [.../* @__PURE__ */ new Set([...eRest_tokens, ...ecsRest_tokens, ...ecsDark_tokens])];\n      style = resolve2(preset.css, { dt });\n    }\n    return {\n      primitive: {\n        css: primitive_css,\n        tokens: primitive_tokens\n      },\n      semantic: {\n        css: semantic_css,\n        tokens: semantic_tokens\n      },\n      global: {\n        css: global_css,\n        tokens: global_tokens\n      },\n      style\n    };\n  },\n  getPreset({ name = \"\", preset = {}, options, params, set, defaults, selector }) {\n    var _e, _f, _g;\n    let p_css, p_tokens, p_style;\n    if (isNotEmpty2(preset) && options.transform !== \"strict\") {\n      const _name = name.replace(\"-directive\", \"\");\n      const _a = preset, { colorScheme, extend, css: css2 } = _a, vRest = __objRest(_a, [\"colorScheme\", \"extend\", \"css\"]);\n      const _b = extend || {}, { colorScheme: eColorScheme } = _b, evRest = __objRest(_b, [\"colorScheme\"]);\n      const _c = colorScheme || {}, { dark } = _c, csRest = __objRest(_c, [\"dark\"]);\n      const _d = eColorScheme || {}, { dark: ecsDark } = _d, ecsRest = __objRest(_d, [\"dark\"]);\n      const vRest_var = isNotEmpty2(vRest) ? this._toVariables({ [_name]: __spreadValues(__spreadValues({}, vRest), evRest) }, options) : {};\n      const csRest_var = isNotEmpty2(csRest) ? this._toVariables({ [_name]: __spreadValues(__spreadValues({}, csRest), ecsRest) }, options) : {};\n      const csDark_var = isNotEmpty2(dark) ? this._toVariables({ [_name]: __spreadValues(__spreadValues({}, dark), ecsDark) }, options) : {};\n      const [vRest_css, vRest_tokens] = [(_e = vRest_var.declarations) != null ? _e : \"\", vRest_var.tokens || []];\n      const [csRest_css, csRest_tokens] = [(_f = csRest_var.declarations) != null ? _f : \"\", csRest_var.tokens || []];\n      const [csDark_css, csDark_tokens] = [(_g = csDark_var.declarations) != null ? _g : \"\", csDark_var.tokens || []];\n      const light_variable_css = this.transformCSS(_name, `${vRest_css}${csRest_css}`, \"light\", \"variable\", options, set, defaults, selector);\n      const dark_variable_css = this.transformCSS(_name, csDark_css, \"dark\", \"variable\", options, set, defaults, selector);\n      p_css = `${light_variable_css}${dark_variable_css}`;\n      p_tokens = [.../* @__PURE__ */ new Set([...vRest_tokens, ...csRest_tokens, ...csDark_tokens])];\n      p_style = resolve2(css2, { dt });\n    }\n    return {\n      css: p_css,\n      tokens: p_tokens,\n      style: p_style\n    };\n  },\n  getPresetC({ name = \"\", theme = {}, params, set, defaults }) {\n    var _a;\n    const { preset, options } = theme;\n    const cPreset = (_a = preset == null ? void 0 : preset.components) == null ? void 0 : _a[name];\n    return this.getPreset({ name, preset: cPreset, options, params, set, defaults });\n  },\n  // @deprecated - use getPresetC instead\n  getPresetD({ name = \"\", theme = {}, params, set, defaults }) {\n    var _a, _b;\n    const dName = name.replace(\"-directive\", \"\");\n    const { preset, options } = theme;\n    const dPreset = ((_a = preset == null ? void 0 : preset.components) == null ? void 0 : _a[dName]) || ((_b = preset == null ? void 0 : preset.directives) == null ? void 0 : _b[dName]);\n    return this.getPreset({ name: dName, preset: dPreset, options, params, set, defaults });\n  },\n  applyDarkColorScheme(options) {\n    return !(options.darkModeSelector === \"none\" || options.darkModeSelector === false);\n  },\n  getColorSchemeOption(options, defaults) {\n    var _a;\n    return this.applyDarkColorScheme(options) ? this.regex.resolve(options.darkModeSelector === true ? defaults.options.darkModeSelector : (_a = options.darkModeSelector) != null ? _a : defaults.options.darkModeSelector) : [];\n  },\n  getLayerOrder(name, options = {}, params, defaults) {\n    const { cssLayer } = options;\n    if (cssLayer) {\n      const order = resolve2(cssLayer.order || \"primeui\", params);\n      return `@layer ${order}`;\n    }\n    return \"\";\n  },\n  getCommonStyleSheet({ name = \"\", theme = {}, params, props = {}, set, defaults }) {\n    const common = this.getCommon({ name, theme, params, set, defaults });\n    const _props = Object.entries(props).reduce((acc, [k, v]) => acc.push(`${k}=\"${v}\"`) && acc, []).join(\" \");\n    return Object.entries(common || {}).reduce((acc, [key, value]) => {\n      if (isObject3(value) && Object.hasOwn(value, \"css\")) {\n        const _css = minifyCSS(value.css);\n        const id = `${key}-variables`;\n        acc.push(`<style type=\"text/css\" data-primevue-style-id=\"${id}\" ${_props}>${_css}</style>`);\n      }\n      return acc;\n    }, []).join(\"\");\n  },\n  getStyleSheet({ name = \"\", theme = {}, params, props = {}, set, defaults }) {\n    var _a;\n    const options = { name, theme, params, set, defaults };\n    const preset_css = (_a = name.includes(\"-directive\") ? this.getPresetD(options) : this.getPresetC(options)) == null ? void 0 : _a.css;\n    const _props = Object.entries(props).reduce((acc, [k, v]) => acc.push(`${k}=\"${v}\"`) && acc, []).join(\" \");\n    return preset_css ? `<style type=\"text/css\" data-primevue-style-id=\"${name}-variables\" ${_props}>${minifyCSS(preset_css)}</style>` : \"\";\n  },\n  createTokens(obj = {}, defaults, parentKey = \"\", parentPath = \"\", tokens = {}) {\n    Object.entries(obj).forEach(([key, value]) => {\n      const currentKey = matchRegex5(key, defaults.variable.excludedKeyRegex) ? parentKey : parentKey ? `${parentKey}.${toTokenKey2(key)}` : toTokenKey2(key);\n      const currentPath = parentPath ? `${parentPath}.${key}` : key;\n      if (isObject3(value)) {\n        this.createTokens(value, defaults, currentKey, currentPath, tokens);\n      } else {\n        tokens[currentKey] || (tokens[currentKey] = {\n          paths: [],\n          computed(colorScheme, tokenPathMap = {}) {\n            var _a, _b;\n            if (this.paths.length === 1) {\n              return (_a = this.paths[0]) == null ? void 0 : _a.computed(this.paths[0].scheme, tokenPathMap[\"binding\"]);\n            } else if (colorScheme && colorScheme !== \"none\") {\n              return (_b = this.paths.find((p) => p.scheme === colorScheme)) == null ? void 0 : _b.computed(colorScheme, tokenPathMap[\"binding\"]);\n            }\n            return this.paths.map((p) => p.computed(p.scheme, tokenPathMap[p.scheme]));\n          }\n        });\n        tokens[currentKey].paths.push({\n          path: currentPath,\n          value,\n          scheme: currentPath.includes(\"colorScheme.light\") ? \"light\" : currentPath.includes(\"colorScheme.dark\") ? \"dark\" : \"none\",\n          computed(colorScheme, tokenPathMap = {}) {\n            let computedValue = value;\n            tokenPathMap[\"name\"] = this.path;\n            tokenPathMap[\"binding\"] || (tokenPathMap[\"binding\"] = {});\n            if (matchRegex5(value, EXPR_REGEX)) {\n              const val = value.trim();\n              const _val = val.replaceAll(EXPR_REGEX, (v) => {\n                var _a;\n                const path = v.replace(/{|}/g, \"\");\n                const computed = (_a = tokens[path]) == null ? void 0 : _a.computed(colorScheme, tokenPathMap);\n                return isArray2(computed) && computed.length === 2 ? `light-dark(${computed[0].value},${computed[1].value})` : computed == null ? void 0 : computed.value;\n              });\n              computedValue = matchRegex5(_val.replace(VAR_REGEX, \"0\"), CALC_REGEX) ? `calc(${_val})` : _val;\n            }\n            isEmpty2(tokenPathMap[\"binding\"]) && delete tokenPathMap[\"binding\"];\n            return {\n              colorScheme,\n              path: this.path,\n              paths: tokenPathMap,\n              value: computedValue.includes(\"undefined\") ? void 0 : computedValue\n            };\n          }\n        });\n      }\n    });\n    return tokens;\n  },\n  getTokenValue(tokens, path, defaults) {\n    var _a;\n    const normalizePath = (str) => {\n      const strArr = str.split(\".\");\n      return strArr.filter((s) => !matchRegex5(s.toLowerCase(), defaults.variable.excludedKeyRegex)).join(\".\");\n    };\n    const token = normalizePath(path);\n    const colorScheme = path.includes(\"colorScheme.light\") ? \"light\" : path.includes(\"colorScheme.dark\") ? \"dark\" : void 0;\n    const computedValues = [(_a = tokens[token]) == null ? void 0 : _a.computed(colorScheme)].flat().filter((computed) => computed);\n    return computedValues.length === 1 ? computedValues[0].value : computedValues.reduce((acc = {}, computed) => {\n      const _a2 = computed, { colorScheme: cs } = _a2, rest = __objRest(_a2, [\"colorScheme\"]);\n      acc[cs] = rest;\n      return acc;\n    }, void 0);\n  },\n  getSelectorRule(selector1, selector2, type, css2) {\n    return type === \"class\" || type === \"attr\" ? getRule(isNotEmpty2(selector2) ? `${selector1}${selector2},${selector1} ${selector2}` : selector1, css2) : getRule(selector1, isNotEmpty2(selector2) ? getRule(selector2, css2) : css2);\n  },\n  transformCSS(name, css2, mode, type, options = {}, set, defaults, selector) {\n    if (isNotEmpty2(css2)) {\n      const { cssLayer } = options;\n      if (type !== \"style\") {\n        const colorSchemeOption = this.getColorSchemeOption(options, defaults);\n        css2 = mode === \"dark\" ? colorSchemeOption.reduce((acc, { type: type2, selector: _selector }) => {\n          if (isNotEmpty2(_selector)) {\n            acc += _selector.includes(\"[CSS]\") ? _selector.replace(\"[CSS]\", css2) : this.getSelectorRule(_selector, selector, type2, css2);\n          }\n          return acc;\n        }, \"\") : getRule(selector != null ? selector : \":root\", css2);\n      }\n      if (cssLayer) {\n        const layerOptions = {\n          name: \"primeui\",\n          order: \"primeui\"\n        };\n        isObject3(cssLayer) && (layerOptions.name = resolve2(cssLayer.name, { name, type }));\n        if (isNotEmpty2(layerOptions.name)) {\n          css2 = getRule(`@layer ${layerOptions.name}`, css2);\n          set == null ? void 0 : set.layerNames(layerOptions.name);\n        }\n      }\n      return css2;\n    }\n    return \"\";\n  }\n};\n\n// src/config/index.ts\nvar config_default = {\n  defaults: {\n    variable: {\n      prefix: \"p\",\n      selector: \":root\",\n      excludedKeyRegex: /^(primitive|semantic|components|directives|variables|colorscheme|light|dark|common|root|states|extend|css)$/gi\n    },\n    options: {\n      prefix: \"p\",\n      darkModeSelector: \"system\",\n      cssLayer: false\n    }\n  },\n  _theme: void 0,\n  _layerNames: /* @__PURE__ */ new Set(),\n  _loadedStyleNames: /* @__PURE__ */ new Set(),\n  _loadingStyles: /* @__PURE__ */ new Set(),\n  _tokens: {},\n  update(newValues = {}) {\n    const { theme } = newValues;\n    if (theme) {\n      this._theme = __spreadProps(__spreadValues({}, theme), {\n        options: __spreadValues(__spreadValues({}, this.defaults.options), theme.options)\n      });\n      this._tokens = themeUtils_default.createTokens(this.preset, this.defaults);\n      this.clearLoadedStyleNames();\n    }\n  },\n  get theme() {\n    return this._theme;\n  },\n  get preset() {\n    var _a;\n    return ((_a = this.theme) == null ? void 0 : _a.preset) || {};\n  },\n  get options() {\n    var _a;\n    return ((_a = this.theme) == null ? void 0 : _a.options) || {};\n  },\n  get tokens() {\n    return this._tokens;\n  },\n  getTheme() {\n    return this.theme;\n  },\n  setTheme(newValue) {\n    this.update({ theme: newValue });\n    service_default.emit(\"theme:change\", newValue);\n  },\n  getPreset() {\n    return this.preset;\n  },\n  setPreset(newValue) {\n    this._theme = __spreadProps(__spreadValues({}, this.theme), { preset: newValue });\n    this._tokens = themeUtils_default.createTokens(newValue, this.defaults);\n    this.clearLoadedStyleNames();\n    service_default.emit(\"preset:change\", newValue);\n    service_default.emit(\"theme:change\", this.theme);\n  },\n  getOptions() {\n    return this.options;\n  },\n  setOptions(newValue) {\n    this._theme = __spreadProps(__spreadValues({}, this.theme), { options: newValue });\n    this.clearLoadedStyleNames();\n    service_default.emit(\"options:change\", newValue);\n    service_default.emit(\"theme:change\", this.theme);\n  },\n  getLayerNames() {\n    return [...this._layerNames];\n  },\n  setLayerNames(layerName) {\n    this._layerNames.add(layerName);\n  },\n  getLoadedStyleNames() {\n    return this._loadedStyleNames;\n  },\n  isStyleNameLoaded(name) {\n    return this._loadedStyleNames.has(name);\n  },\n  setLoadedStyleName(name) {\n    this._loadedStyleNames.add(name);\n  },\n  deleteLoadedStyleName(name) {\n    this._loadedStyleNames.delete(name);\n  },\n  clearLoadedStyleNames() {\n    this._loadedStyleNames.clear();\n  },\n  getTokenValue(tokenPath) {\n    return themeUtils_default.getTokenValue(this.tokens, tokenPath, this.defaults);\n  },\n  getCommon(name = \"\", params) {\n    return themeUtils_default.getCommon({ name, theme: this.theme, params, defaults: this.defaults, set: { layerNames: this.setLayerNames.bind(this) } });\n  },\n  getComponent(name = \"\", params) {\n    const options = { name, theme: this.theme, params, defaults: this.defaults, set: { layerNames: this.setLayerNames.bind(this) } };\n    return themeUtils_default.getPresetC(options);\n  },\n  // @deprecated - use getComponent instead\n  getDirective(name = \"\", params) {\n    const options = { name, theme: this.theme, params, defaults: this.defaults, set: { layerNames: this.setLayerNames.bind(this) } };\n    return themeUtils_default.getPresetD(options);\n  },\n  getCustomPreset(name = \"\", preset, selector, params) {\n    const options = { name, preset, options: this.options, selector, params, defaults: this.defaults, set: { layerNames: this.setLayerNames.bind(this) } };\n    return themeUtils_default.getPreset(options);\n  },\n  getLayerOrderCSS(name = \"\") {\n    return themeUtils_default.getLayerOrder(name, this.options, { names: this.getLayerNames() }, this.defaults);\n  },\n  transformCSS(name = \"\", css2, type = \"style\", mode) {\n    return themeUtils_default.transformCSS(name, css2, mode, type, this.options, { layerNames: this.setLayerNames.bind(this) }, this.defaults);\n  },\n  getCommonStyleSheet(name = \"\", params, props = {}) {\n    return themeUtils_default.getCommonStyleSheet({ name, theme: this.theme, params, props, defaults: this.defaults, set: { layerNames: this.setLayerNames.bind(this) } });\n  },\n  getStyleSheet(name, params, props = {}) {\n    return themeUtils_default.getStyleSheet({ name, theme: this.theme, params, props, defaults: this.defaults, set: { layerNames: this.setLayerNames.bind(this) } });\n  },\n  onStyleMounted(name) {\n    this._loadingStyles.add(name);\n  },\n  onStyleUpdated(name) {\n    this._loadingStyles.add(name);\n  },\n  onStyleLoaded(event, { name }) {\n    if (this._loadingStyles.size) {\n      this._loadingStyles.delete(name);\n      service_default.emit(`theme:${name}:load`, event);\n      !this._loadingStyles.size && service_default.emit(\"theme:load\");\n    }\n  }\n};\n\n// src/actions/updatePreset.ts\nfunction updatePreset(...presets) {\n  const newPreset = deepMerge2(config_default.getPreset(), ...presets);\n  config_default.setPreset(newPreset);\n  return newPreset;\n}\n\n// src/actions/updatePrimaryPalette.ts\nfunction updatePrimaryPalette(palette) {\n  return $t().primaryPalette(palette).update().preset;\n}\n\n// src/actions/updateSurfacePalette.ts\nfunction updateSurfacePalette(palette) {\n  return $t().surfacePalette(palette).update().preset;\n}\n\n// src/actions/usePreset.ts\nimport { deepMerge as deepMerge3 } from \"@primeuix/utils/object\";\nfunction usePreset(...presets) {\n  const newPreset = deepMerge3(...presets);\n  config_default.setPreset(newPreset);\n  return newPreset;\n}\n\n// src/actions/useTheme.ts\nfunction useTheme(theme) {\n  return $t(theme).update({ mergePresets: false });\n}\n\n// src/stylesheet/index.ts\nimport { createStyleMarkup, isNotEmpty as isNotEmpty3 } from \"@primeuix/utils\";\nvar StyleSheet = class {\n  constructor({ attrs } = {}) {\n    this._styles = /* @__PURE__ */ new Map();\n    this._attrs = attrs || {};\n  }\n  get(key) {\n    return this._styles.get(key);\n  }\n  has(key) {\n    return this._styles.has(key);\n  }\n  delete(key) {\n    this._styles.delete(key);\n  }\n  clear() {\n    this._styles.clear();\n  }\n  add(key, css2) {\n    if (isNotEmpty3(css2)) {\n      const meta = {\n        name: key,\n        css: css2,\n        attrs: this._attrs,\n        markup: createStyleMarkup(css2, this._attrs)\n      };\n      this._styles.set(key, __spreadProps(__spreadValues({}, meta), {\n        element: this.createStyleElement(meta)\n      }));\n    }\n  }\n  update() {\n  }\n  getStyles() {\n    return this._styles;\n  }\n  getAllCSS() {\n    return [...this._styles.values()].map((style) => style.css).filter(String);\n  }\n  getAllMarkup() {\n    return [...this._styles.values()].map((style) => style.markup).filter(String);\n  }\n  getAllElements() {\n    return [...this._styles.values()].map((style) => style.element);\n  }\n  /**\n   * Used to create a style element.\n   *\n   * @param {StyleMeta} meta\n   * @returns {HTMLStyleElement | undefined}\n   */\n  // eslint-disable-next-line\n  createStyleElement(meta = {}) {\n    return void 0;\n  }\n};\nvar stylesheet_default = StyleSheet;\nexport {\n  $dt,\n  $t,\n  CALC_REGEX,\n  EXPR_REGEX,\n  stylesheet_default as StyleSheet,\n  config_default as Theme,\n  service_default as ThemeService,\n  themeUtils_default as ThemeUtils,\n  VAR_REGEX,\n  css,\n  definePreset,\n  dt,\n  dtwt,\n  evaluateDtExpressions,\n  getComputedValue,\n  getRule,\n  getVariableName,\n  getVariableValue,\n  hasOddBraces,\n  merge,\n  mix_default as mix,\n  palette_default as palette,\n  setProperty,\n  shade_default as shade,\n  tint_default as tint,\n  toNormalizePrefix,\n  toNormalizeVariable,\n  toTokenKey,\n  toUnit,\n  toValue,\n  toVariables_default as toVariables,\n  updatePreset,\n  updatePrimaryPalette,\n  updateSurfacePalette,\n  usePreset,\n  useTheme\n};\n//# sourceMappingURL=index.mjs.map",
      "start": 1750971639851,
      "end": 1750971639860,
      "sourcemaps": null
    },
    {
      "name": "@tailwindcss/vite:generate:build",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750971639860,
      "end": 1750971639860,
      "order": "normal"
    }
  ]
}
