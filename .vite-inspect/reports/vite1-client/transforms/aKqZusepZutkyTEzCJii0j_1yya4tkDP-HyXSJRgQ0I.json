{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/ithub-vue/src/shared/api/create-request-fx.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEffect } from 'effector';\nimport { type FetchOptions, ofetch } from 'ofetch';\n\ntype CreateRequestParams = FetchOptions & {\n    url: string;\n};\n\ntype Fn<P> = (params: P) => CreateRequestParams;\n\ntype Payload<P> = CreateRequestParams | Fn<P>;\n\ntype CreateRequestInstanceParams<P> = CreateRequestParams & {\n    payload: Payload<P>;\n    withTokenInHeaders?: boolean;\n};\n\ntype CreateRequestFxParams = Omit<CreateRequestInstanceParams<CreateRequestParams>, 'payload' | 'url'>;\n\nfunction getConfig<P>(payload: Payload<P>, params: P): CreateRequestParams {\n    return typeof payload === 'function' ? payload(params) : payload;\n}\n\nconst createRequestInstance = <P = CreateRequestParams, R = void>({\n    baseURL,\n    headers,\n    payload,\n    withTokenInHeaders,\n}: CreateRequestInstanceParams<P>) =>\n    createEffect<P, R>((params): Promise<R> => {\n        const { url, ...fetchOptions } = getConfig(payload, params);\n\n        const newHeaders = new Headers(headers);\n\n        if (withTokenInHeaders) {\n            newHeaders.append('Authorization', `Token ${JSON.parse(localStorage.getItem('$userId') ?? '')}`);\n        }\n\n        return ofetch(url, {\n            ...fetchOptions,\n            headers: newHeaders,\n            baseURL,\n        }) as Promise<R>;\n    });\nexport const createRequestFx =\n    (params: CreateRequestFxParams) =>\n    <P = CreateRequestParams, R = void>(payload: Payload<P>) =>\n        createRequestInstance<P, R>({\n            ...(params as CreateRequestParams),\n            payload,\n        });\n",
      "start": 1750971640374,
      "end": 1750971640481,
      "sourcemaps": null
    },
    {
      "name": "@tailwindcss/vite:generate:build",
      "start": 1750971640481,
      "end": 1750971640481,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { createEffect } from \"effector\";\nimport { ofetch } from \"ofetch\";\nfunction getConfig(payload, params) {\n  return typeof payload === \"function\" ? payload(params) : payload;\n}\nconst createRequestInstance = ({\n  baseURL,\n  headers,\n  payload,\n  withTokenInHeaders\n}) => createEffect((params) => {\n  const { url, ...fetchOptions } = getConfig(payload, params);\n  const newHeaders = new Headers(headers);\n  if (withTokenInHeaders) {\n    newHeaders.append(\"Authorization\", `Token ${JSON.parse(localStorage.getItem(\"$userId\") ?? \"\")}`);\n  }\n  return ofetch(url, {\n    ...fetchOptions,\n    headers: newHeaders,\n    baseURL\n  });\n});\nexport const createRequestFx = (params) => (payload) => createRequestInstance({\n  ...params,\n  payload\n});\n",
      "start": 1750971640481,
      "end": 1750971640500,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/ithub-vue/src/shared/api/create-request-fx.ts"
        ],
        "sourcesContent": [
          "import { createEffect } from 'effector';\nimport { type FetchOptions, ofetch } from 'ofetch';\n\ntype CreateRequestParams = FetchOptions & {\n    url: string;\n};\n\ntype Fn<P> = (params: P) => CreateRequestParams;\n\ntype Payload<P> = CreateRequestParams | Fn<P>;\n\ntype CreateRequestInstanceParams<P> = CreateRequestParams & {\n    payload: Payload<P>;\n    withTokenInHeaders?: boolean;\n};\n\ntype CreateRequestFxParams = Omit<CreateRequestInstanceParams<CreateRequestParams>, 'payload' | 'url'>;\n\nfunction getConfig<P>(payload: Payload<P>, params: P): CreateRequestParams {\n    return typeof payload === 'function' ? payload(params) : payload;\n}\n\nconst createRequestInstance = <P = CreateRequestParams, R = void>({\n    baseURL,\n    headers,\n    payload,\n    withTokenInHeaders,\n}: CreateRequestInstanceParams<P>) =>\n    createEffect<P, R>((params): Promise<R> => {\n        const { url, ...fetchOptions } = getConfig(payload, params);\n\n        const newHeaders = new Headers(headers);\n\n        if (withTokenInHeaders) {\n            newHeaders.append('Authorization', `Token ${JSON.parse(localStorage.getItem('$userId') ?? '')}`);\n        }\n\n        return ofetch(url, {\n            ...fetchOptions,\n            headers: newHeaders,\n            baseURL,\n        }) as Promise<R>;\n    });\nexport const createRequestFx =\n    (params: CreateRequestFxParams) =>\n    <P = CreateRequestParams, R = void>(payload: Payload<P>) =>\n        createRequestInstance<P, R>({\n            ...(params as CreateRequestParams),\n            payload,\n        });\n"
        ],
        "mappings": "AAAA,SAAS,oBAAoB;AAC7B,SAA4B,cAAc;AAiB1C,SAAS,UAAa,SAAqB,QAAgC;AACvE,SAAO,OAAO,YAAY,aAAa,QAAQ,MAAM,IAAI;AAC7D;AAEA,MAAM,wBAAwB,CAAoC;AAAA,EAC9D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,MACI,aAAmB,CAAC,WAAuB;AACvC,QAAM,EAAE,KAAK,GAAG,aAAa,IAAI,UAAU,SAAS,MAAM;AAE1D,QAAM,aAAa,IAAI,QAAQ,OAAO;AAEtC,MAAI,oBAAoB;AACpB,eAAW,OAAO,iBAAiB,SAAS,KAAK,MAAM,aAAa,QAAQ,SAAS,KAAK,EAAE,CAAC,EAAE;AAAA,EACnG;AAEA,SAAO,OAAO,KAAK;AAAA,IACf,GAAG;AAAA,IACH,SAAS;AAAA,IACT;AAAA,EACJ,CAAC;AACL,CAAC;AACE,aAAM,kBACT,CAAC,WACD,CAAoC,YAChC,sBAA4B;AAAA,EACxB,GAAI;AAAA,EACJ;AACJ,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750971640500,
      "end": 1750971640500,
      "order": "normal"
    }
  ]
}
